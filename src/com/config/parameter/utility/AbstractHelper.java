package com.config.parameter.utility;

public abstract class AbstractHelper implements IHelper {

	public abstract void printCustomHelpMessage();
	
	public void printItem(String configItem, String meaning) {
		System.out.println(configItem + ": " + meaning);
	}
	
	public void printItem(String configItem, String meaning, String defaultValue) {
		System.out.println(configItem + "[default: " + defaultValue + "]: " + meaning);
	}
	
	@Override
	public void printHelpMessage() {
		System.out.println("Command parameters are set in the form -option1 value1 -option2 value2...");
		System.out.println("For example: java -jar androlic.jar -apkName test.apk -apkBasePath test\\apk");
		System.out.println("");
		
		System.out.println("All command parameters and their meaning are shown below:");
		this.printItem("apkName", "the name of apk under analysis");
		this.printItem("apkBasePath", "the directory where the apk under analysis is located");
		this.printItem("outputBasePath", "the directory to save output file generated by Androlic");
		this.printItem("androidPath", "the directory where android.jar is located");
		this.printItem("javaHome", "the directory where rt.jar is located", "generated through environment variable java.home");
		this.printItem("configureFile", "the path of file where users can set parameters above", "null");
		
//		System.out.println("debugMode[default: 0]: whether Androlic runs in debug mode. 1 means yes, 0 means no");
//		System.out.println("isJimpleOutput[default: 1]: whether output jimple file after analysis. 1 means yes, 0 means no.");
//		System.out.println("maxRunningTime[default: 1800000]: max running time (millisecond) of Androlic");
//		System.out.println("maxLoopUnrollNumber[default: 1]: max unroll number when dealing with a loop");
//		System.out.println("maxPathNumber[default: 40000]: max path number that Androlic can generate when analzes a method.");
//		System.out.println("maxRecursiveInvocationLevel[default: 0]: max invocation number for recursive method");
//		System.out.println("entryMethod[default: dummy main method]: the entry method for symbolic engine of Androlic. For example, com.onCreate");
//		System.out.println("initMethodSubsignature[default: void <init>()]: If entry method is nonstatic method, users need to set the init method to invoke");
	}

}
